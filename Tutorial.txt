Как сделать курсовую работу:
0. Зарегистрируйтесь на сайте github.com и войдите на него.
1. Скачайте среду (https://github.com/git-for-windows/git/releases/download/v2.24.0.windows.1/Git-2.24.0-32-bit.exe)
2. Установите ее и откройте.
3. Перейдите в среде в ту папку, в которую хотите скачать репозиторий
4. Пишите: git clone https://github.com/DisappointedDuck/IVBO-07-16
  4.1 Если вы уже скачали этот репозиторий до этого, то перейдите в него, и впишите git pull origin master- это обновит его до текущего состояния
5. Пишите git checkout -b Name_Surname (для меня эта команда будет выглядеть как git -b checkout Andrey_Umnov)
6. Откройте в проводнике скачанный в пункте 4 репозиторий.
7. Закиньте туда файл с вашей документацией (для примера: Filename.md, но вы назовите его своей фамилией)
  7.1 Перейдите туда в консоли - введите команду cd IVBO-07-16
8. Пишите git add Filename.md
9. Пишите git commit -m "Любой текст."
10. Пишите git push origin Name_Surname
  10.1 Здесь Git потребует ваши логин и пароль от github. Введите их.
11. Файл залит в вашу ветку! Откройте https://github.com/DisappointedDuck/IVBO-07-16
12. Щелкните по branch, и перейдите на только что созданную вами ветку.
13. Щелкните на New pull request
14. В списке compare выберите свою ветку. В списке base должно стоять master.
14. Щелкните Create pull request
15. Напишите мне, и я солью его с master веткой
16. Ветки слиты! Теперь ваш файл лежит в общем репозитории. Откройте его в браузере и скопирйуте ссылку.
16,5. На всякий случай выполните git pull origin master, чтобы скачать максимально актуальный файл!
17. Теперь внесите себя в список. Для этого откройте в своем репозитории файл Spisok.md
18. Замените текст в списке по шаблону, указанному выше. В скобки вставьте ссылку из пункта 16
19. Пишите git add Spisok.md
20. Повторите пункты 9-16.
21. Вы восхитительны!

СОВЕТЫ:
1. Пользуйтесь автозаполнением команд - жмите Tab, и bash допишет команду за вас.
2. Жмите Tab два раза, чтобы увидеть все доступные команды.
3. Копирование из командной строки bash - ctrl+shift+c Вставка: ctrl+shift+v


Что тут происходит:
Git - система контроля версий, позволяет разным людям совместно работать над одним и тем же кодом, выложенным на участке сервера Git - в репозитории. По сути репозиторий, это просто удаленная папка. 
Мы будем называть удаленным репозиторием  папку, которая хранится на сервере, 
а локальным - ту которая хранится у вас на компьютере.
Вы скачиваете код с которым вы хотите поработать, вносите свои изменения и присылаете их обратно в эту папку. Автор проекта просматривает ваши изменения, и добавляет их в свой проект. С Git придется работать почти на каждой должности в IT - разработчикам, тестировщикам, системным администраторам, DevOps, техническим писателям и всем-всем-всем. Поэтому пункт о знании Git является несомненным плюсом в любом IT резюме.
Рассмотрим по пунктам, что происходит в методичке.
Пункт 0 можно оставить без коментариев.
1. Git Bash for Windows - самая близкая реализация к управлению git на unix системах - системах, с которыми вам скорее всего придется работать.
2. Открыв среду вы увидите bash консоль. Bash - это реализация языка Shell которым управляются Unix системы, оборудование Cisco а также большая часть операционных систем. Рассмотрим несколько команд, применяемых в этой работе:
cd [название_папки]- change directory - перемещение в соседнюю с текущей папку
ls - LiSt - показывает все содержимое текущей папки
git - ключевое слово, показывающее, что следующая команда должна быть выполнена с помощью git
3. Вы можете перемещаться по файловой системе с помощью этих двух команд в такой последовательности:
	1. Выведите все содержимое папки командой ls
	2. Напишите cd [имя_одной_из_выведенных_папок], если хотите спуститься в них
	3. Введите cd .. если хотите подняться на уровень выше
Таким образом оставновитесь в папке, в которую хотите закачать репозиторий. 
4. Команда git clone [адрес_репозитория] создает в текущей директории папку, с именем, таким же, как у скачиваемого репозитория, и загружает внутрь этой папки все содиржимое репозитория.
4.1 В репозиторий вносите изменения не вы один - команда git pull (анг. "притянуть") обновляет ваш скачанный репозиторий в соответствии с удаленным на сервере - докачивает новые файлы и вносит одобренные автором проекта изменения.
Расмотрим команду подробнее:
git - указатель на принадлежность к git
pull - обновить репозиторий до последней версии
origin(анг. происхождение) - указатель на удаленный репозиторий, из которого мы получили наш локальный.
master - см. комментарии к пункту 5.
5. Одновременно над одним и тем же файлом может работать множество пользователей. Чтобы они могли одновременно иметь доступ к определенному файлу, в git существует понятие ветки(branch). Ветка - это копия удаленого репозитория. В ней мы можем вносить свои изменения, пока основной файл остается неизменным. Закончив работу над веткой мы можем предложить автору проекта слить(merge) нашу ветку с основной, перенеся в основную все изменения.
Основная ветка называется master - в ней присутствуют только те изменения, которые одобрил автор проекта.
Дополнительные ветки могут называться как угодно - но чем информативнее - тем лучше. Например мы называем ветку своими именем и фамилией, чтобы автору проекта было понятно, кто прислал эти изменения. 
Рассмотрим комнду подробнее:
- checkout - команда перехода с текущей ветку, на ветку со следующим названием. После ее выполнения, локальный репозиторий версии master заменится версией Name_Surname
- -b - указатель, сообщающей системе, что ветки с таким именем не существует, и ее нужно создать - то есть создать копию локального репозитория.
- Name_Surname - название ветки, которое мы составили из своих имени и фамилии
5.1 В git есть команда git status - она показывает в какой вы сейчас находитесь ветке, и каково состояние внесенных в нее изменений.
6. После выполнения команды clone, на компьютере появилась папка, содержащая все файлы удаленного репозитория. Мы можем открыть ее и внести изменения в эти файлы. Нужно отметить, что мы перешли на ветку Name_Surname(мы можем убедиться в этом, введя команду git status). Все изменения которые мы внесем будут относиться только к ветке Name_Surname, и не затронут ветку master, и все прочие ветки.
7.1. Не забудьте перевести и консоль в скачанную директорию!
7. После переноса, введите в окно bash команду git status. Вы увидите, что ваш файл был замечен системой git. Он подсвечен красным - это значит, что этот файл не был добавлен в набор изменений, и не повлияет на файлы в локальном репозитории.
8. Введите команду git add [имя_файла]. Команда add добавит файл в коммит - набор изменений. Если после этого вы введете git status, то файл будет подсвечен зеленым - это значит что он включен в коммит. Теперь вы не сможете сменить ветку, пока не примените это изменение или не откажетесь от него.
Как только вы напишете git add вы можете воспользоваться
9. git commit - команда для закрепления набора изменений. Все файлы подсвеченные зеленым будут закреплены в ветке. К коммиту обязательно прилагается сообщение, описывающее его. Мы создаем его командой -m - message.
У команды commit есть альтернатива - команда stash. Stash не сохраняет зеленые файлы, а прячет их, позволяя сменить ветку. Спрятанные изменения можно применить в любой ветке - с помощью команды git stash apply. Так, если вы заметили что изменили не ту ветку - сделайте:
git stash (спрячет все выбранные файлы)
git checkout [требуемая_ветка] (переход на другую ветку)
git stash apply (выложит изменения в ветку, в которую мы перешли)
git commit (сохранит изменени этой ветки)
После применения commit git выведет вам результат сохранения изменений - в том числе и уникальный номер коммита. 
С помощью команды git revert [номер_коммита](анг. откатиться) вы сможете отменить изменения, сделанные в определенном коммите.
Если вы забыли номер, вы можете вывести его с помощью git log - команда выведет все коммиты, сделанные с веткой и их описания - поэтому описания стоит делать как можно более информативными.
10. Настало время обновить и удаленный репозиторий. Команда git push обновляет удаленный репозиторий в соответствии с вашим: как git pull, но в другую сторону. Рассмотрим команду подробнее.
git - уже описывалось
push - загрузить в удаленный репозиторий данные из локального
origin - указатель на то, что мы хотим загружать в тот удаленный репозиторий, из которого скачали наш локальный
Name_Surname - имя ветки, в которую мы хотим загрузить локальную ветку. Примечательно, что если на удаленном репозитории такой ветки нет git ее создаст.
11. Настало время поработать с сайтом github. Открыв репозиторий по ссылке, вы откроете master ветку удаленного репозитория. В ней ваших изменений пока нет
12. Переключитесь на ту ветку, которая названа вашими именем и фамилией. Теперь вы видите свои изменения.
13. Предложение слить вашу ветку с другой называется pull request. Создайте его по соответствующей кнопке. 
14. Выберите в качестве base(основы) - ветку master - ту, в которую хотите внести изменения. В качестве compare (сравнения) - ветку из которой хотите взять изменения.
15. Нажмите Create pull request, и автор увидит его, при следующем посещении github. Но лучше напишите мне. Или скажите. Или как-то иначе передайте.
16,5. Pull Request может порождать ошибку - в том случае, если он противоречит последовательности коммитов, и ваше изменение признается устаревшим. Обновите репозиторий чтобы этого не произошло.

Все остальные пункты уже были так или иначе расписаны. Не стесняйтесь писать или спрашивать по любым вопросам и трудностям.
